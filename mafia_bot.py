import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from mafia_game import MafiaGame

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MafiaBot:
    def __init__(self, token):
        self.application = ApplicationBuilder().token(token).build()
        self.games = {}  # {chat_id: MafiaGame}
        self.player_choices = {}  # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler('start', self.start))
        self.application.add_handler(CommandHandler('newgame', self.new_game))
        self.application.add_handler(CommandHandler('join', self.join))
        self.application.add_handler(CommandHandler('startgame', self.start_game))
        self.application.add_handler(CallbackQueryHandler(self.button))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ñ–∏—é! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /newgame'
        )

    async def new_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.message.chat.id
        if chat_id in self.games:
            await update.message.reply_text('–ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è')
            return
        
        creator = update.message.from_user
        self.games[chat_id] = {
            'creator': creator,
            'players': [creator],
            'game': None,
            'state': 'LOBBY'
        }
        
        max_players = int(context.args[0]) if context.args and context.args[0].isdigit() else "?"
        await update.message.reply_text(
            f'–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /join\n'
            f'–°–æ–∑–¥–∞—Ç–µ–ª—å: {creator.first_name}\n'
            f'–ò–≥—Ä–æ–∫–æ–≤: 1/{max_players}'
        )

    async def join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.message.chat.id
        if chat_id not in self.games:
            await update.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /newgame')
            return
        
        player = update.message.from_user
        if player in self.games[chat_id]['players']:
            await update.message.reply_text('–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!')
            return
        
        self.games[chat_id]['players'].append(player)
        await update.message.reply_text(
            f'{player.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n'
            f'–ò–≥—Ä–æ–∫–æ–≤: {len(self.games[chat_id]["players"])}'
        )

    async def start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.message.chat.id
        if chat_id not in self.games:
            await update.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /newgame')
            return
        
        game_data = self.games[chat_id]
        if len(game_data['players']) < 4:
            await update.message.reply_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 4)')
            return
        
        player_names = [p.first_name for p in game_data['players']]
        game_data['game'] = MafiaGame(player_names)
        game_data['state'] = 'NIGHT'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for player, name in zip(game_data['players'], player_names):
            try:
                role = next(p.role for p in game_data['game'].players if p.name == name)
                await context.bot.send_message(
                    chat_id=player.id,
                    text=f'–í–∞—à–∞ —Ä–æ–ª—å: {role}\n\n–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {player.id}: {e}")
        
        await self.start_night_phase(chat_id, context)

    async def start_night_phase(self, chat_id, context: ContextTypes.DEFAULT_TYPE):
        game = self.games[chat_id]['game']
        game.night_phase()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–æ—á–∏
        await context.bot.send_message(
            chat_id=chat_id,
            text="üåô –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞! –í—Å–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –≥–ª–∞–∑–∞..."
        )
        
        # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤
        await self.organize_night_actions(chat_id, context)

    async def organize_night_actions(self, chat_id, context: ContextTypes.DEFAULT_TYPE):
        game = self.games[chat_id]['game']
        players = self.games[chat_id]['players']
        
        for player, game_player in zip(players, game.players):
            if not game_player.alive:
                continue
                
            if game_player.role == "–î–æ–∫—Ç–æ—Ä":
                await self.request_doctor_action(player.id, game, context)
            elif game_player.role == "–ú–∞—Ñ–∏—è":
                await self.request_mafia_action(player.id, game, context)
            # ... –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π

    async def request_doctor_action(self, user_id, game, context: ContextTypes.DEFAULT_TYPE):
        alive_players = [p for p in game.players if p.alive]
        keyboard = []
        
        for i, p in enumerate(alive_players):
            keyboard.append([InlineKeyboardButton(p.name, callback_data=f"doctor_{i}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=user_id,
            text="–î–æ–∫—Ç–æ—Ä, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é?",
            reply_markup=reply_markup
        )

    async def button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data.startswith("doctor_"):
            await self.handle_doctor_choice(user_id, int(data.split("_")[1]), context)
        # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback'–æ–≤

    async def handle_doctor_choice(self, user_id, choice_idx, context: ContextTypes.DEFAULT_TYPE):
        # –ù–∞–π—Ç–∏ –∏–≥—Ä—É, –≥–¥–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ - –¥–æ–∫—Ç–æ—Ä
        for chat_id, game_data in self.games.items():
            game = game_data['game']
            if not game:
                continue
                
            doctor = next((p for p in game.players if p.name == next(
                u.first_name for u in game_data['players'] if u.id == user_id
            )), None)
            
            if doctor and doctor.role == "–î–æ–∫—Ç–æ—Ä":
                alive_players = [p for p in game.players if p.alive]
                target = alive_players[choice_idx]
                target.protected = True
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–í—ã –∑–∞—â–∏—Ç–∏–ª–∏ {target.name}!"
                )
                break

    def run(self):
        self.application.run_polling()

if __name__ == '__main__':
    TOKEN = '8126476935:AAHtavtEbT-7jH412MaSRw8nr4LciEYGKkk'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    bot = MafiaBot(TOKEN)
    bot.run()
