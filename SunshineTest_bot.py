import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
players = {}
game_state = "LOBBY"
registration_msg = None
night_actions = {}
night_end_time = None
day_number = 0
night_number = 0
group_chat_id = None
special_roles = {
    "–ú–∞—Ñ–∏—è": "ü§µüèº –ú–∞—Ñ–∏—è",
    "–î–æ–Ω": "ü§µüèª –î–æ–Ω",
    "–î–æ–∫—Ç–æ—Ä": "üë®üèº‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä",
    "–ö–æ–º–∏—Å—Å–∞—Ä": "üïµüèº –ö–æ–º–∏—Å—Å–∞—Ä",
    "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": "üë®üèº –ú–∏—Ä–Ω—ã–π –ñ–∏—Ç–µ–ª—å"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global game_state
    
    if len(players) < 4:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ 4+)")
        return
    
    game_state = "GAME"
    await start_game(update, context)

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    global game_state, registration_msg, group_chat_id
    
    group_chat_id = update.effective_chat.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    
    if game_state == "GAME":
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!")
        return
    
    if registration_msg:
        try:
            await registration_msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    game_state = "REGISTRATION"
    registration_msg = await update.message.reply_text(
        "üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É:\n\n" + get_players_list(),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]
        ])
    )

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if user.id not in players:
        players[user.id] = {
            "name": user.first_name,
            "role": None,
            "alive": True,
            "protected": False
        }
        
        await registration_msg.edit_text(
            text="üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É:\n\n" + get_players_list(),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]
            ])
        )
        
        await context.bot.send_message(
            chat_id=user.id,
            text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ!"
        )
        
        if len(players) >= 4:
            await start_game(update, context)
    else:
        await query.edit_message_text("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
    global game_state, registration_msg, night_number, day_number
    
    game_state = "GAME"
    night_number = 1
    day_number = 0
    
    if registration_msg:
        try:
            await registration_msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        registration_msg = None
    
    assign_roles()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –≤ –õ–° –∏–≥—Ä–æ–∫–∞–º
    for user_id, data in players.items():
        try:
            role_display = special_roles.get(data['role'], data['role'])
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_display}\n–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ—ë –Ω–∏–∫–æ–º—É!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–∏ {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(p['name'] for p in players.values())}"
    )
    
    await start_night(update, context)

async def start_night(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É"""
    global game_state, night_actions, night_end_time, night_number
    
    game_state = "NIGHT"
    night_actions = {}
    night_end_time = datetime.now() + timedelta(seconds=60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    alive_players = [p for p in players.values() if p['alive']]
    player_list = "\n".join(f"{i+1}. {p['name']}" for i, p in enumerate(alive_players))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∏–≥—Ä–æ–∫–∞–º)
    roles_present = {}
    for p in players.values():
        if p['alive']:
            role = special_roles.get(p['role'], p['role'])
            roles_present[role] = roles_present.get(role, 0) + 1
    
    roles_text = []
    for role, count in roles_present.items():
        if count > 1:
            roles_text.append(f"{role} - {count}")
        else:
            roles_text.append(role)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üåô –ù–æ—á—å {night_number}\n\n"
             f"–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n{player_list}\n\n"
             f"–ò–∑ –Ω–∏—Ö: {', '.join(roles_text)}\n"
             f"–í—Å–µ–≥–æ: {len(alive_players)}\n\n"
             "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –ø—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è..."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª—è–º
    for user_id, data in players.items():
        if not data['alive']:
            continue
            
        if data['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]:
            await send_mafia_action(user_id, context)
        elif data['role'] == "–î–æ–∫—Ç–æ—Ä":
            await send_doctor_action(user_id, context)
        elif data['role'] == "–ö–æ–º–∏—Å—Å–∞—Ä":
            await send_commissioner_action(user_id, context)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–æ—á–∏
    context.job_queue.run_once(end_night, 60, data=update)

async def send_mafia_action(user_id, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –º–∞—Ñ–∏–∏"""
    targets = [uid for uid, data in players.items() 
              if data['alive'] and data['role'] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]]
    
    keyboard = [[InlineKeyboardButton(players[uid]['name'], callback_data=f"mafia_kill_{uid}")] for uid in targets]
    
    await context.bot.send_message(
        chat_id=user_id,
        text="üî™ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —É–±–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def send_doctor_action(user_id, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–∫—Ç–æ—Ä–∞"""
    targets = [uid for uid, data in players.items() if data['alive']]
    
    keyboard = [[InlineKeyboardButton(players[uid]['name'], callback_data=f"doctor_heal_{uid}")] for uid in targets]
    
    await context.bot.send_message(
        chat_id=user_id,
        text="üíä –ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—á–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def send_commissioner_action(user_id, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∏—Å—Å–∞—Ä–∞"""
    await context.bot.send_message(
        chat_id=user_id,
        text="üïµÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="com_check")],
            [InlineKeyboardButton("–£–±–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="com_kill")]
        ])
    )

async def handle_night_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç"""
    global group_chat_id, night_actions
    
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    role = special_roles.get(players[user_id]['role'], players[user_id]['role'])
    
    if data.startswith("mafia_kill_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ñ–∏–∏
        target_id = int(data.split("_")[2])
        night_actions["mafia"] = {"target_id": target_id}
        
        await query.edit_message_text("‚úÖ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω (–≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç)")
        await context.bot.send_message(
            chat_id=group_chat_id,
            text=f"{role} –≤—ã–±—Ä–∞–ª –∂–µ—Ä—Ç–≤—É... üëÅÔ∏è"
        )
    
    elif data.startswith("doctor_heal_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—Ç–æ—Ä–∞
        target_id = int(data.split("_")[2])
        night_actions["doctor"] = {"target_id": target_id}
        
        await query.edit_message_text("‚úÖ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω (–≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç)")
        await context.bot.send_message(
            chat_id=group_chat_id,
            text=f"{role} –≤—ã—à–µ–ª –Ω–∞ –Ω–æ—á–Ω—É—é —Å–º–µ–Ω—É... üíâ"
        )
    
    elif data == "com_check":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∏—Å—Å–∞—Ä–∞
        targets = [uid for uid, data in players.items() 
                 if data['alive'] and data['role'] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]]
        
        keyboard = [[InlineKeyboardButton(players[uid]['name'], callback_data=f"com_check_{uid}")] 
                  for uid in targets]
        
        await query.edit_message_text(
            text="üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –¥–ª—è edit_message_text
    
    elif data == "com_kill":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –∫–æ–º–∏—Å—Å–∞—Ä–æ–º
        targets = [uid for uid, data in players.items() 
                 if data['alive'] and data['role'] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]]
        
        keyboard = [[InlineKeyboardButton(players[uid]['name'], callback_data=f"com_kill_{uid}")] 
                  for uid in targets]
        
        await query.edit_message_text(
            text="üî´ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –¥–ª—è edit_message_text
    
    elif data.startswith("com_check_"):
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∏—Å—Å–∞—Ä–∞
        target_id = int(data.split("_")[2])
        night_actions["commissioner"] = {"action": "check", "target_id": target_id}
        
        await query.edit_message_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç –≤–∞–º –ª–∏—á–Ω–æ)")
        await context.bot.send_message(
            chat_id=group_chat_id,
            text=f"{role} –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É... üîé"
        )
    
    elif data.startswith("com_kill_"):
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –∫–æ–º–∏—Å—Å–∞—Ä–æ–º
        target_id = int(data.split("_")[2])
        night_actions["commissioner"] = {"action": "kill", "target_id": target_id}
        
        await query.edit_message_text("‚úÖ –ü—Ä–∏–∫–∞–∑ –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–¥–∞–Ω (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤ —á–∞—Ç–µ)")
        await context.bot.send_message(
            chat_id=group_chat_id,
            text=f"{role} –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø–∏—Å—Ç–æ–ª–µ—Ç... üî´"
        )

async def end_night(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç"""
    global game_state, night_number, day_number, group_chat_id
    
    update = context.job.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    killed_id = night_actions.get("mafia", {}).get("target_id")
    protected_id = night_actions.get("doctor", {}).get("target_id")
    com_action = night_actions.get("commissioner", {})
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏
    death_messages = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –º–∞—Ñ–∏–∏
    if killed_id and killed_id != protected_id:
        players[killed_id]['alive'] = False
        killer_role = next((p['role'] for p in players.values() if p['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        death_messages.append(
            f"‚ò†Ô∏è –ù–æ—á—å—é –±—ã–ª —É–±–∏—Ç {players[killed_id]['name']}\n"
            f"–ì–æ–≤–æ—Ä—è—Ç, —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∞ {special_roles.get(killer_role, killer_role)}"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –∫–æ–º–∏—Å—Å–∞—Ä–æ–º
    if com_action.get("action") == "kill":
        target_id = com_action["target_id"]
        if players[target_id]['alive']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—â–∏—â–µ–Ω –ª–∏ —Ü–µ–ª—å –¥–æ–∫—Ç–æ—Ä–æ–º
            players[target_id]['alive'] = False
            death_messages.append(
                f"üî´ –ö–æ–º–∏—Å—Å–∞—Ä –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–ª {players[target_id]['name']}\n"
                "–ì–æ—Ä–æ–¥ —Å—Ç–∞–ª –Ω–µ–º–Ω–æ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ..."
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∏—Å—Å–∞—Ä–∞
    if com_action.get("action") == "check":
        target_id = com_action["target_id"]
        target_role = players[target_id]['role']
        commissioner_id = next((uid for uid, data in players.items() if data['role'] == "–ö–æ–º–∏—Å—Å–∞—Ä"), None)
        if commissioner_id:
            await context.bot.send_message(
                chat_id=commissioner_id,
                text=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {players[target_id]['name']} - {special_roles.get(target_role, target_role)}"
            )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    day_number += 1
    alive_players = [p['name'] for p in players.values() if p['alive']]
    
    morning_message = (
        f"üåû –£—Ç—Ä–æ {day_number}\n"
        "–°–æ–ª–Ω—Ü–µ –≤–æ—Å—Ö–æ–¥–∏—Ç, –ø–æ–¥—Å—É—à–∏–≤–∞—è –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–∞—Ö –ø—Ä–æ–ª–∏—Ç—É—é –Ω–æ—á—å—é –∫—Ä–æ–≤—å...\n\n"
    )
    
    if death_messages:
        morning_message += "\n".join(death_messages) + "\n\n"
    else:
        morning_message += "–≠—Ç–æ–π –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±.\n\n"
    
    morning_message += f"üèò –ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏ ({len(alive_players)}):\n" + "\n".join(f"‚ñ´Ô∏è {name}" for name in alive_players)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    await context.bot.send_message(
        chat_id=group_chat_id,
        text=morning_message
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    await check_game_over(update, context)

async def check_game_over(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
    mafia_count = sum(1 for data in players.values() if data['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"] and data['alive'])
    civilians_count = sum(1 for data in players.values() if data['role'] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"] and data['alive'])
    
    if mafia_count == 0:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üéâ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏! –ú–∞—Ñ–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!"
        )
        await stop_game(update, context)
    elif mafia_count >= civilians_count:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üòà –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞! –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        )
        await stop_game(update, context)
    else:
        game_state = "DAY"

async def stop_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É"""
    global players, game_state, registration_msg, night_actions, day_number, night_number
    
    players = {}
    game_state = "LOBBY"
    registration_msg = None
    night_actions = {}
    day_number = 0
    night_number = 0
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üõë –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã."
    )

def assign_roles():
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏"""
    player_ids = list(players.keys())
    random.shuffle(player_ids)
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
    roles = ["–ú–∞—Ñ–∏—è", "–î–æ–∫—Ç–æ—Ä", "–ö–æ–º–∏—Å—Å–∞—Ä"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –î–æ–Ω–∞ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (6+)
    if len(player_ids) >= 6:
        roles.append("–î–æ–Ω")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ - –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏
    roles += ["–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"] * (len(player_ids) - len(roles))
    random.shuffle(roles)
    
    for i, user_id in enumerate(player_ids):
        players[user_id]['role'] = roles[i]

def get_players_list():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"""
    return ", ".join(p['name'] for p in players.values()) if players else "–ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ"

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token("7595238354:AAEA1NIUS5w7-eWT1qLf8Cjq9UlcND9HwxY").build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("game", game))
    application.add_handler(CommandHandler("stop", stop_game))
    application.add_handler(CallbackQueryHandler(join, pattern="^join$"))
    application.add_handler(CallbackQueryHandler(handle_night_action))
    
    application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
