import logging
import random
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
players = {}
game_state = "LOBBY"
day_votes = {}
day_discussion_end_time = None
voting_msg = None
revote_msg = None
registration_msg = None
night_actions = {}
night_end_time = None
day_number = 0
night_number = 0
group_chat_id = None
special_roles = {
    "–ú–∞—Ñ–∏—è": "ü§µüèº –ú–∞—Ñ–∏—è",
    "–î–æ–Ω": "ü§µüèª –î–æ–Ω",
    "–î–æ–∫—Ç–æ—Ä": "üë®üèº‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä",
    "–ö–æ–º–∏—Å—Å–∞—Ä": "üïµüèº –ö–æ–º–∏—Å—Å–∞—Ä",
    "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": "üë®üèº –ú–∏—Ä–Ω—ã–π –ñ–∏—Ç–µ–ª—å"
}

class GameTimer:
    def __init__(self):
        self._task = None
    
    async def start(self, duration, callback, data=None):
        self.cancel()
        self._task = asyncio.create_task(self._run(duration, callback, data))
    
    async def _run(self, duration, callback, data):
        try:
            await asyncio.sleep(duration)
            await callback(data)
        except Exception as e:
            logger.error(f"Timer error: {e}")
    
    def cancel(self):
        if self._task and not self._task.done():
            self._task.cancel()

game_timer = GameTimer()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_state
    if len(players) < 4:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ 4+)")
        return
    game_state = "GAME"
    await start_game(update, context)

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_state, registration_msg, group_chat_id
    group_chat_id = update.effective_chat.id
    
    if game_state == "GAME":
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!")
        return
    
    if registration_msg:
        try:
            await registration_msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    game_state = "REGISTRATION"
    registration_msg = await update.message.reply_text(
        "üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É:\n\n" + get_players_list(),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]
        ])
    )

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    if user.id not in players:
        players[user.id] = {
            "name": user.first_name,
            "role": None,
            "alive": True,
            "protected": False
        }
        
        await registration_msg.edit_text(
            text="üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É:\n\n" + get_players_list(),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]
            ])
        )
        
        await context.bot.send_message(
            chat_id=user.id,
            text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ!"
        )
        
        if len(players) >= 4:
            await start_game(update, context)
    else:
        await query.edit_message_text("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_state, registration_msg, night_number, day_number
    game_state = "GAME"
    night_number = 1
    day_number = 0
    
    if registration_msg:
        try:
            await registration_msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        registration_msg = None
    
    assign_roles()
    
    for user_id, data in players.items():
        try:
            role_display = special_roles.get(data['role'], data['role'])
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_display}\n–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ—ë –Ω–∏–∫–æ–º—É!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–∏ {user_id}: {e}")

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(p['name'] for p in players.values())}"
    )
    
    await start_night(update, context)

async def start_night(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_state, night_actions, night_end_time, night_number
    game_state = "NIGHT"
    night_actions = {}
    night_end_time = datetime.now() + timedelta(seconds=60)
    
    alive_players = [p for p in players.values() if p['alive']]
    player_list = "\n".join(f"{i+1}. {p['name']}" for i, p in enumerate(alive_players))
    
    roles_present = {}
    for p in players.values():
        if p['alive']:
            role = special_roles.get(p['role'], p['role'])
            roles_present[role] = roles_present.get(role, 0) + 1
    
    roles_text = []
    for role, count in roles_present.items():
        if count > 1:
            roles_text.append(f"{role} - {count}")
        else:
            roles_text.append(role)
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üåô –ù–æ—á—å {night_number}\n\n"
             f"–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n{player_list}\n\n"
             f"–ò–∑ –Ω–∏—Ö: {', '.join(roles_text)}\n"
             f"–í—Å–µ–≥–æ: {len(alive_players)}\n\n"
             "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –ø—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è..."
    )
    
    for user_id, data in players.items():
        if not data['alive']:
            continue
            
        if data['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]:
            await send_mafia_action(user_id, context)
        elif data['role'] == "–î–æ–∫—Ç–æ—Ä":
            await send_doctor_action(user_id, context)
        elif data['role'] == "–ö–æ–º–∏—Å—Å–∞—Ä":
            await send_commissioner_action(user_id, context)
    
    await game_timer.start(60, end_night_wrapper, context)

async def end_night_wrapper(context):
    try:
        await end_night(context)
    except Exception as e:
        logger.error(f"End night error: {e}")
async def send_mafia_action(user_id, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –º–∞—Ñ–∏–∏"""
    targets = [uid for uid, data in players.items() 
              if data['alive'] and data['role'] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]]
    
    keyboard = [[InlineKeyboardButton(players[uid]['name'], callback_data=f"mafia_kill_{uid}")] for uid in targets]
    
    await context.bot.send_message(
        chat_id=user_id,
        text="üî™ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —É–±–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def send_doctor_action(user_id, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–∫—Ç–æ—Ä–∞"""
    targets = [uid for uid, data in players.items() if data['alive']]
    
    keyboard = [[InlineKeyboardButton(players[uid]['name'], callback_data=f"doctor_heal_{uid}")] for uid in targets]
    
    await context.bot.send_message(
        chat_id=user_id,
        text="üíä –ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—á–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def send_commissioner_action(user_id, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∏—Å—Å–∞—Ä–∞"""
    await context.bot.send_message(
        chat_id=user_id,
        text="üïµÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="com_check")],
            [InlineKeyboardButton("–£–±–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="com_kill")]
        ])
    )
async def handle_night_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç"""
    global group_chat_id, night_actions
    
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏–≥—Ä–∞ –≤ –Ω—É–∂–Ω–æ–π —Ñ–∞–∑–µ
    if game_state != "NIGHT":
        await query.edit_message_text("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π!")
        return
    
    user_id = query.from_user.id
    data = query.data
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏–≥—Ä–æ–∫ –∂–∏–≤
    if not players.get(user_id, {}).get('alive', False):
        await query.edit_message_text("üíÄ –í—ã –º–µ—Ä—Ç–≤—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Å –∏–∫–æ–Ω–∫–æ–π
    role = special_roles.get(players[user_id]['role'], players[user_id]['role'])
    
    try:
        if data.startswith("mafia_kill_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ñ–∏–∏
            target_id = int(data.split("_")[2])
            if not players.get(target_id, {}).get('alive', False):
                await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –º–µ—Ä—Ç–≤!")
                return
                
            night_actions["mafia"] = {"target_id": target_id, "by": user_id}
            await query.edit_message_text("‚úÖ –í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω (—É–±–∏–π—Å—Ç–≤–æ)")
            await context.bot.send_message(
                chat_id=group_chat_id,
                text=f"{role} —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä... üëÅÔ∏è"
            )
        
        elif data.startswith("doctor_heal_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—Ç–æ—Ä–∞
            target_id = int(data.split("_")[2])
            night_actions["doctor"] = {"target_id": target_id}
            await query.edit_message_text("‚úÖ –í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–ª–µ—á–µ–Ω–∏–µ)")
            await context.bot.send_message(
                chat_id=group_chat_id,
                text=f"{role} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –Ω–æ—á–Ω–æ–º—É –¥–µ–∂—É—Ä—Å—Ç–≤—É... üíâ"
            )
        
        elif data == "com_check":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∏—Å—Å–∞—Ä–∞
            targets = [
                uid for uid, data in players.items() 
                if data['alive'] and uid != user_id  # –ù–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è
            ]
            
            if not targets:
                await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
                return
                
            keyboard = [
                [InlineKeyboardButton(players[uid]['name'], callback_data=f"com_check_{uid}")] 
                for uid in targets
            ]
            
            await query.edit_message_text(
                text="üîç –ö–æ–≥–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif data == "com_kill":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –∫–æ–º–∏—Å—Å–∞—Ä–æ–º
            targets = [
                uid for uid, data in players.items() 
                if data['alive'] and data['role'] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]
            ]
            
            if not targets:
                await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–µ–ª–µ–π!")
                return
                
            keyboard = [
                [InlineKeyboardButton(players[uid]['name'], callback_data=f"com_kill_{uid}")] 
                for uid in targets
            ]
            
            await query.edit_message_text(
                text="üî´ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif data.startswith("com_check_"):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            target_id = int(data.split("_")[2])
            night_actions["commissioner"] = {
                "action": "check", 
                "target_id": target_id,
                "by": user_id
            }
            await query.edit_message_text("üïµÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞...")
            await context.bot.send_message(
                chat_id=group_chat_id,
                text=f"{role} —Å–∫—Ä—ã—Ç–Ω–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–æ–º... üîé"
            )
        
        elif data.startswith("com_kill_"):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞
            target_id = int(data.split("_")[2])
            night_actions["commissioner"] = {
                "action": "kill", 
                "target_id": target_id,
                "by": user_id
            }
            await query.edit_message_text("üíÄ –ü—Ä–∏–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!")
            await context.bot.send_message(
                chat_id=group_chat_id,
                text=f"{role} –∑–∞—Ä—è–∂–∞–µ—Ç –æ—Ä—É–∂–∏–µ... üî´"
            )
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä
        await check_night_actions_completion(context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_night_action: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

async def check_night_actions_completion(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ª–∏ —Ä–æ–ª–∏ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä"""
    alive_players = {
        uid: data for uid, data in players.items() 
        if data['alive'] and data['role'] in special_roles
    }
    
    completed = 0
    required = 0
    
    # –ú–∞—Ñ–∏—è/–î–æ–Ω
    if any(p['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"] for p in alive_players.values()):
        required += 1
        if "mafia" in night_actions:
            completed += 1
    
    # –î–æ–∫—Ç–æ—Ä
    if any(p['role'] == "–î–æ–∫—Ç–æ—Ä" for p in alive_players.values()):
        required += 1
        if "doctor" in night_actions:
            completed += 1
    
    # –ö–æ–º–∏—Å—Å–∞—Ä
    if any(p['role'] == "–ö–æ–º–∏—Å—Å–∞—Ä" for p in alive_players.values()):
        required += 1
        if "commissioner" in night_actions:
            completed += 1
    
    # –ï—Å–ª–∏ –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä - –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–æ—á—å –¥–æ—Å—Ä–æ—á–Ω–æ
    if completed >= required and required > 0:
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="üåÉ –í—Å–µ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ù–æ—á—å –æ–∫–æ–Ω—á–µ–Ω–∞."
        )
        await end_night(context)

async def end_night(context: ContextTypes.DEFAULT_TYPE):
    global game_state, night_number, day_number, day_votes
    
    if game_state != "NIGHT":
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ end_night –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {game_state}")
        return
    
    day_votes = {}
    
    killed_id = night_actions.get("mafia", {}).get("target_id")
    protected_id = night_actions.get("doctor", {}).get("target_id")
    com_action = night_actions.get("commissioner", {})
    
    death_messages = []
    
    if killed_id and killed_id != protected_id:
        players[killed_id]['alive'] = False
        killer_role = next((p['role'] for p in players.values() if p['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        death_messages.append(
            f"‚ò†Ô∏è –ù–æ—á—å—é –±—ã–ª —É–±–∏—Ç {players[killed_id]['name']}\n"
            f"–ì–æ–≤–æ—Ä—è—Ç, —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∞ {special_roles.get(killer_role, killer_role)}"
        )
    
    if com_action.get("action") == "kill":
        target_id = com_action["target_id"]
        if players[target_id]['alive']:
            players[target_id]['alive'] = False
            death_messages.append(
                f"üî´ –ö–æ–º–∏—Å—Å–∞—Ä –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–ª {players[target_id]['name']}\n"
                "–ì–æ—Ä–æ–¥ —Å—Ç–∞–ª –Ω–µ–º–Ω–æ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ..."
            )
    
    if com_action.get("action") == "check":
        target_id = com_action["target_id"]
        target_role = players[target_id]['role']
        commissioner_id = next((uid for uid, data in players.items() if data['role'] == "–ö–æ–º–∏—Å—Å–∞—Ä"), None)
        if commissioner_id:
            await context.bot.send_message(
                chat_id=commissioner_id,
                text=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {players[target_id]['name']} - {special_roles.get(target_role, target_role)}"
            )
    
    day_number += 1
    alive_players = [p['name'] for p in players.values() if p['alive']]
    
    morning_message = (
        f"üåû –£—Ç—Ä–æ {day_number}\n"
        "–°–æ–ª–Ω—Ü–µ –≤–æ—Å—Ö–æ–¥–∏—Ç, –ø–æ–¥—Å—É—à–∏–≤–∞—è –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–∞—Ö –ø—Ä–æ–ª–∏—Ç—É—é –Ω–æ—á—å—é –∫—Ä–æ–≤—å...\n\n"
    )
    
    if death_messages:
        morning_message += "\n".join(death_messages) + "\n\n"
    else:
        morning_message += "–≠—Ç–æ–π –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±.\n\n"
    
    morning_message += f"üèò –ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏ ({len(alive_players)}):\n" + "\n".join(f"‚ñ´Ô∏è {name}" for name in alive_players)
    
    await context.bot.send_message(
        chat_id=group_chat_id,
        text=morning_message
    )
    
    await check_game_over(None, context)
    if game_state == "GAME":
        await start_day_discussion(None, context)

async def start_day_discussion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_state, day_discussion_end_time
    
    if game_state != "NIGHT":
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ start_day_discussion –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {game_state}")
        return
    
    game_state = "DAY_DISCUSSION"
    day_discussion_end_time = datetime.now() + timedelta(seconds=60)
    
    alive_players = [p for p in players.values() if p['alive']]
    roles_present = {}
    for p in players.values():
        if p['alive']:
            role = special_roles.get(p['role'], p['role'])
            roles_present[role] = roles_present.get(role, 0) + 1
    
    roles_text = ", ".join(f"{role} - {count}" if count > 1 else role 
                          for role, count in roles_present.items())
    
    await context.bot.send_message(
        chat_id=group_chat_id,
        text=f"üåá –î–µ–Ω—å {day_number}\n\n"
             f"–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏ ({len(alive_players)}):\n" + 
             "\n".join(f"‚ñ´Ô∏è {p['name']}" for p in alive_players) + 
             f"\n\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–æ–ª–∏: {roles_text}\n\n"
             "–£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ..."
    )
    
    await game_timer.start(60, start_voting_wrapper, context)

async def start_voting_wrapper(context):
    try:
        await start_voting(context)
    except Exception as e:
        logger.error(f"Start voting error: {e}")

async def start_voting(context: ContextTypes.DEFAULT_TYPE):
    global game_state, voting_msg
    
    if game_state != "DAY_DISCUSSION":
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ start_voting –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {game_state}")
        return
    
    game_state = "VOTING"
    
    alive_players = [p for p in players.values() if p['alive']]
    
    voting_msg = await context.bot.send_message(
        chat_id=group_chat_id,
        text="üïí –í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ! –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="start_voting")]
        ])
    )
    
    await game_timer.start(60, end_voting_wrapper, context)

async def end_voting_wrapper(context):
    try:
        await end_voting(context)
    except Exception as e:
        logger.error(f"End voting error: {e}")

async def end_voting(context: ContextTypes.DEFAULT_TYPE):
    global game_state, voting_msg, revote_msg
    
    if game_state != "VOTING":
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ end_voting –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {game_state}")
        return
    
    vote_count = {}
    for target_id in day_votes.values():
        if target_id is not None:
            vote_count[target_id] = vote_count.get(target_id, 0) + 1
    
    if not vote_count:
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="üïí –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ\n\n"
                 "–ú–Ω–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π —Ä–∞–∑–æ—à–ª–∏—Å—å... –†–∞–∑–æ—à–ª–∏—Å—å –∏ —Å–∞–º–∏ –∂–∏—Ç–µ–ª–∏, —Ç–∞–∫ –Ω–∏–∫–æ–≥–æ –∏ –Ω–µ –ø–æ–≤–µ—Å–∏–≤..."
        )
        await start_night(None, context)
        return
    
    max_votes = max(vote_count.values())
    candidates = [uid for uid, count in vote_count.items() if count == max_votes]
    
    if len(candidates) > 1:
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="üïí –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ\n\n"
                 "–ú–Ω–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π —Ä–∞–∑–æ—à–ª–∏—Å—å... –†–∞–∑–æ—à–ª–∏—Å—å –∏ —Å–∞–º–∏ –∂–∏—Ç–µ–ª–∏, —Ç–∞–∫ –Ω–∏–∫–æ–≥–æ –∏ –Ω–µ –ø–æ–≤–µ—Å–∏–≤..."
        )
        await start_night(None, context)
        return
    
    target_id = candidates[0]
    target_name = players[target_id]['name']
    
    revote_msg = await context.bot.send_message(
        chat_id=group_chat_id,
        text=f"üîé –í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ª–∏–Ω—á–µ–≤–∞—Ç—å {target_name}?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç –î–∞", callback_data=f"revote_yes_{target_id}"),
             InlineKeyboardButton("üëé –ù–µ—Ç", callback_data="revote_no")]
        ])
    )
    
    await game_timer.start(30, finalize_voting_wrapper, (None, target_id))

async def finalize_voting_wrapper(data):
    try:
        await finalize_voting(data)
    except Exception as e:
        logger.error(f"Finalize voting error: {e}")

async def finalize_voting(context: ContextTypes.DEFAULT_TYPE):
    update, target_id = context
    
    if revote_msg:
        try:
            await revote_msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await context.bot.send_message(
        chat_id=group_chat_id,
        text="üïí –í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    )
    await start_night(update, context)

async def handle_voting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "start_voting":
        alive_players = [uid for uid, data in players.items() if data['alive']]
        
        keyboard = [
            [InlineKeyboardButton(players[uid]['name'], callback_data=f"vote_{uid}")] 
            for uid in alive_players
        ]
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="vote_skip")])
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üó≥ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –ª–∏–Ω—á–µ–≤–∞—Ç—å:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            await query.edit_message_text("‚úÖ –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è {user_id}: {e}")
    
    elif query.data.startswith("vote_"):
        target = query.data.split("_")[1]
        player_name = players[user_id]['name']
        
        if target == "skip":
            day_votes[user_id] = None
            await query.edit_message_text("‚úÖ –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
            await context.bot.send_message(
                chat_id=group_chat_id,
                text=f"üó≥ {player_name} –ø—Ä–æ–ø—É—Å—Ç–∏–ª(–∞) –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
            )
        else:
            target_id = int(target)
            target_name = players[target_id]['name']
            day_votes[user_id] = target_id
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {target_name}")
            await context.bot.send_message(
                chat_id=group_chat_id,
                text=f"üó≥ {player_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞) –∑–∞: {target_name}"
            )

async def handle_revote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("revote_yes_"):
        target_id = int(query.data.split("_")[2])
        target_name = players[target_id]['name']
        target_role = players[target_id]['role']
        role_display = special_roles.get(target_role, target_role)
        
        players[target_id]['alive'] = False
        
        await context.bot.send_message(
            chat_id=group_chat_id,
            text=f"üíÄ {target_name} –±—ã–ª –ø–æ–≤–µ—à–µ–Ω! –ï–≥–æ —Ä–æ–ª—å: {role_display}"
        )
        
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text=f"üíÄ –í—ã –±—ã–ª–∏ –ø–æ–≤–µ—à–µ–Ω—ã! –í–∞—à–∞ —Ä–æ–ª—å: {role_display}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–≤–µ—à–µ–Ω–Ω–æ–º—É {target_id}: {e}")
        
        await check_game_over(update, context)
        if game_state == "GAME":
            await start_night(update, context)
        
    elif query.data == "revote_no":
        await query.edit_message_text("üïí –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="üïí –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ\n\n"
                 "–ú–Ω–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π —Ä–∞–∑–æ—à–ª–∏—Å—å... –†–∞–∑–æ—à–ª–∏—Å—å –∏ —Å–∞–º–∏ –∂–∏—Ç–µ–ª–∏, —Ç–∞–∫ –Ω–∏–∫–æ–≥–æ –∏ –Ω–µ –ø–æ–≤–µ—Å–∏–≤..."
        )
        await start_night(update, context)

async def check_game_over(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_state
    
    mafia_count = sum(1 for data in players.values() if data['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"] and data['alive'])
    civilians_count = sum(1 for data in players.values() if data['role'] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"] and data['alive'])
    
    if mafia_count == 0:
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="üéâ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏! –ú–∞—Ñ–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!"
        )
        await stop_game(update, context)
    elif mafia_count >= civilians_count:
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="üòà –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞! –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        )
        await stop_game(update, context)

async def stop_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global players, game_state, registration_msg, night_actions, day_number, night_number
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    mafia_alive = any(data['alive'] and data['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"] for data in players.values())
    
    winners = []
    losers = []
    
    for user_id, data in players.items():
        role_display = special_roles.get(data['role'], data['role'])
        player_info = f"{data['name']} - {role_display}"
        
        if mafia_alive:  # –ü–æ–±–µ–¥–∏–ª–∞ –º–∞—Ñ–∏—è
            if data['role'] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]:
                winners.append(player_info)
            else:
                losers.append(player_info)
        else:  # –ü–æ–±–µ–¥–∏–ª–∏ –º–∏—Ä–Ω—ã–µ
            if data['role'] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]:
                winners.append(player_info)
            else:
                losers.append(player_info)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_message = "üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üèÜ\n\n"
    result_message += "üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–ò:\n" + "\n".join(f"‚ñ´Ô∏è {winner}" for winner in winners) + "\n\n"
    result_message += "üòû –û–°–¢–ê–õ–¨–ù–´–ï –ò–ì–†–û–ö–ò:\n" + "\n".join(f"‚ñ´Ô∏è {loser}" for loser in losers)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await context.bot.send_message(
        chat_id=group_chat_id,
        text=result_message
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    game_timer.cancel()
    players = {}
    game_state = "LOBBY"
    registration_msg = None
    night_actions = {}
    day_number = 0
    night_number = 0

def assign_roles():
    player_ids = list(players.keys())
    random.shuffle(player_ids)
    
    roles = ["–ú–∞—Ñ–∏—è", "–î–æ–∫—Ç–æ—Ä", "–ö–æ–º–∏—Å—Å–∞—Ä"]
    
    if len(player_ids) >= 6:
        roles.append("–î–æ–Ω")
    
    roles += ["–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"] * (len(player_ids) - len(roles))
    random.shuffle(roles)
    
    for i, user_id in enumerate(player_ids):
        players[user_id]['role'] = roles[i]

def get_players_list():
    return ", ".join(p['name'] for p in players.values()) if players else "–ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ"

def main():
    application = Application.builder().token("7595238354:AAEA1NIUS5w7-eWT1qLf8Cjq9UlcND9HwxY").build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("game", game))
    application.add_handler(CommandHandler("stop", stop_game))
    application.add_handler(CallbackQueryHandler(join, pattern="^join$"))
    application.add_handler(CallbackQueryHandler(handle_night_action))
    application.add_handler(CallbackQueryHandler(handle_voting, pattern="^(start_voting|vote_)"))
    application.add_handler(CallbackQueryHandler(handle_revote, pattern="^revote_"))
    
    application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
