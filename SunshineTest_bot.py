import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
players = {}  # {user_id: username}
game_state = "LOBBY"  # LOBBY, REGISTRATION, GAME
registration_msg = None  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
    global game_state
    
    if len(players) < 4:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ 4+)")
        return
    
    game_state = "GAME"
    await start_game(update, context)

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /game - –Ω–∞—á–∏–Ω–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    global game_state, registration_msg
    
    if game_state == "GAME":
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if registration_msg:
        try:
            await registration_msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    game_state = "REGISTRATION"
    registration_msg = await update.message.reply_text(
        get_registration_text(),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]
        ])
    )

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if user.id not in players:
        players[user.id] = user.first_name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        try:
            await registration_msg.edit_text(
                text=get_registration_text(),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ 4+ –∏–≥—Ä–æ–∫–∞—Ö
        if len(players) >= 4:
            await start_game(update, context)
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–°
        try:
            await context.bot.send_message(
                chat_id=user.id,
                text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–°: {e}")
    else:
        await query.edit_message_text("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
    global game_state, registration_msg
    
    game_state = "GAME"
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    if registration_msg:
        try:
            await registration_msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        registration_msg = None
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏
    roles_assignment = assign_roles()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –≤ –õ–°
    for user_id, role in roles_assignment.items():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role}\n–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ—ë –Ω–∏–∫–æ–º—É!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–∏ {user_id}: {e}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(players.values())}\n\n–†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!"
    )

def assign_roles():
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏"""
    player_ids = list(players.keys())
    random.shuffle(player_ids)
    
    # –°–æ–∑–¥–∞–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
    roles = ["–ú–∞—Ñ–∏—è", "–ö–æ–º–∏—Å—Å–∞—Ä", "–î–æ–∫—Ç–æ—Ä"]
    roles += ["–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"] * (len(player_ids) - 3)
    random.shuffle(roles)
    
    return {pid: roles[i] for i, pid in enumerate(player_ids)}

def get_registration_text():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"""
    player_list = ", ".join(players.values()) if players else "–ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ"
    return f"üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {player_list}\n–ò—Ç–æ–≥–æ: {len(players)} —á–µ–ª."

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É"""
    global players, game_state, registration_msg
    
    players = {}
    game_state = "LOBBY"
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    if registration_msg:
        try:
            await registration_msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        registration_msg = None
    
    await update.message.reply_text("üõë –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token("7595238354:AAEA1NIUS5w7-eWT1qLf8Cjq9UlcND9HwxY").build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("game", game))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CallbackQueryHandler(join, pattern="^join$"))
    
    application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
